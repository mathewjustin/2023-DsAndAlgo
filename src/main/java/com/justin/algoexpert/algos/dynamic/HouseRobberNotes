1. A function or array that answers the problem for a given state

To solve the original problem, we will just need to return
dp[nums.length - 1]
dp[nums.length - 1] or
dp(nums.length - 1)
dp(nums.length - 1), depending if we do bottom-up or top-down.


2. A recurrence relation to transition between states

If we are at some house, logically, we have 2 options: we can choose to rob this house, or we can choose to not rob this house.

If we decide not to rob the house, then we don't gain any money.
Whatever money we had from the previous house is how much money we will have at this house - which is  dp(i - 1) dp(i - 1).
If we decide to rob the house, then we gain  nums[i] nums[i] money.
However, this is only possible if we did not rob the previous house.
This means the money we had when arriving at this house is the money we had from the previous house without robbing it,
which would be however much money we had 2 houses ago,
dp(i - 2)
dp(i - 2). After robbing the current house, we will have
dp(i - 2) + nums[i]
dp(i - 2) + nums[i] money.
From these two options, we always want to pick the one that gives us maximum profits. Putting it together, we have our recurrence relation:

dp(i) =max(dp(i - 1), dp(i - 2) + nums[i])

